---
#- name: Delete old folders
#  file:
#    path: "{{ item }}"
#    state: absent
#  with_items:
#    - "{{ folder }}"
#

- name: Include check_dependencies play
  include: "{{ playbook_dir }}/mockfog_application/tasks/check_dependencies.yml"

- name: Include check_variables play
  include: "{{ playbook_dir }}/mockfog_application/tasks/check_variables.yml"

- name: Install Docker SDK
  pip:
    name: docker

- name: Start Docker service
  service:
    name: docker
    state: started

- name: Kill all running docker containers
  shell: docker rm --force $(docker ps -aq) || true

- name: Pull docker images
  docker_image:
    name: "{{ docker_image }}"
    source: pull
    force_source: yes

- name: Check if app-specific env_file exists
  stat: path="{{ inventory_hostname }}.env.j2"
  register: env_file

- name: Write application config
  template:
    src: "{{ inventory_hostname }}.env.j2"
    dest: "{{ folder }}/env_file.env"
  when: env_file.stat.exists

- name: Start application containers which require volumes
  docker_container:
    name: "{{ container_name }}"
    image: "{{ docker_image }}"
    state: started
    auto_remove: yes
    log_driver: journald
    exposed_ports: "{{ expose }}"
    ports: "{{ ports }}"
#    env_file: "{{ folder }}/env_file.env"
    volumes:
#      - "{{ folder }}/env_file.env:{{ folder }}/env_file.env"
      - "{{ env_vars.volumes.host }}:{{ env_vars.volumes.container }}"
  when: env_vars.volumes is defined and env_vars.volumes|length > 0
  ignore_errors: true

- name: Start application containers
  docker_container:
    name: "{{ container_name }}"
    image: "{{ docker_image }}"
    state: started
    auto_remove: yes
    log_driver: journald
    exposed_ports: "{{ expose }}"
    ports: "{{ ports }}"
  when: env_vars.volumes is undefined or env_vars.volumes|length == 0
  ignore_errors: true

#- name: Start docker application containers
#  shell: docker run -d -m256M --cpus 2 -it --rm -p {{ ports }} {{ docker_image }}