---
#- name: Delete old folders
#  file:
#    path: "{{ item }}"
#    state: absent
#  with_items:
#    - "{{ folder }}"
#

- name: Include check_dependencies play
  include: "{{ playbook_dir }}/mockfog_application/tasks/check_dependencies.yml"

- name: Include check_variables play
  include: "{{ playbook_dir }}/mockfog_application/tasks/check_variables.yml"

- name: Install Docker SDK
  pip:
    name: docker

- name: Start Docker service
  service:
    name: docker
    state: started

- name: Kill all running docker containers
  shell: docker rm --force $(docker ps -aq) || true

- name: Pull docker images
  docker_image:
    name: "{{ docker_image }}"
    source: pull
    force_source: yes

- name: create app_config dir
  file:
    path: "/app"
    state: directory
    recurse: yes
    owner: ec2-user
    group: ec2-user
#  when: app_vars.volumes is defined and app_vars.volumes|length > 0

- name: Write application config
  template:
    src: "{{ playbook_dir }}/mockfog_application/templates/env_file.env.j2"
    dest: "{{ folder }}/env_file.env"
  ignore_errors: true
#  when: env_file.stat.exists

- name: Copy config.yaml script
  copy:
    src: "{{ playbook_dir }}{{ app_vars.volumes.path }}"
    dest: /app/config.yaml
    owner: ec2-user
    group: ec2-user
    mode: '0644'
  when: app_vars.volumes is defined and app_vars.volumes|length > 0

- name: Start application containers which require volumes
  docker_container:
    name: "{{ container_name }}"
    image: "{{ docker_image }}"
    state: started
    auto_remove: yes
    log_driver: journald
    exposed_ports: "{{ expose }}"
    ports: "{{ ports }}"
    env_file: "{{ folder }}/env_file.env"
    volumes:
      - "/home/ec2-user/app/config.yaml:{{ app_vars.volumes.container }}"
  when: app_vars.volumes is defined and app_vars.volumes|length > 0
  ignore_errors: true

- name: Start application containers
  docker_container:
    name: "{{ container_name }}"
    image: "{{ docker_image }}"
    state: started
    auto_remove: yes
    log_driver: journald
    exposed_ports: "{{ expose }}"
    ports: "{{ ports }}"
    env_file: "{{ folder }}/env_file.env"
  when: app_vars.volumes is undefined or app_vars.volumes|length == 0
  ignore_errors: true

#- name: Start docker application containers
#  shell: docker run -d -m256M --cpus 2 -it --rm -p {{ ports }} {{ docker_image }}